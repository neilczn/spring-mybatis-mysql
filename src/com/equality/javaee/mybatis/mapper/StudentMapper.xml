<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 名称空间，必须唯一 -->
<mapper namespace="com.equality.javaee.mybatis.pojo.Student">

	<!-- 映射实体与表的关系 
		resultMap 映射实体与表
		type 表示实体全路径名
		id 为实体与表的映射取一个任意且唯一的名字
	-->

	<resultMap type="com.equality.javaee.mybatis.pojo.Student" id="studentMap">
	
		<!-- id 映射主键属性 
			result 映射非主键属性
			property 实体属性名
			column 表的字段名
		-->
		<id property="id"  column="id"/>
		<result property="name" column="name"/>
		<result property="sal" column="sal"/>
		
	</resultMap>
	
	<!-- insert 插入的sql语句  
		 id 为插入的sql语句取一个任意且唯一的名字
		 parameterType 要执行的dao方法的参数，如果是类的话，需要使用全路径类；或者别名，别名需要在mybatis.xmi配置
		 #{id} 这种是从对象中getId获取数据的
	-->
		
	<insert id="add" parameterType="com.equality.javaee.mybatis.pojo.Student">
		insert into students(id,name,sal) values(#{id},#{name},#{sal})
	</insert>
	
	<!-- 根据ID查询学生
		 如果参数不是一个实体的话，只是一个普通变量，例如:int,double,String
		 这里的#{中间的变量名可以随便写}，不过提倡就用方法的形参
	 -->
	<select id="findById" parameterType="int" resultType="com.equality.javaee.mybatis.pojo.Student">
		select id,name,sal from students where id=#{id}
	</select>

	<!-- 查询所有学生 
		 理论上resultType要写List<Student>
		 但这里只需书写List中的类型即可，即只需书写Student的全路径名
	-->
	<select id="findAll" resultType="com.equality.javaee.mybatis.pojo.Student">
		select id,name,sal from students
	</select>
		
	<!-- 更新学生 -->
	<update id="update" parameterType="com.equality.javaee.mybatis.pojo.Student">
		update students set name=#{name},sal=#{sal} where id=#{id}
	</update>
	
	<!-- 删除学生 --> 
	<delete id="delete" parameterType="com.equality.javaee.mybatis.pojo.Student">
		delete from students where id=#{id}
	</delete>


<!-- 
		注意：这个insert/update/delete标签只是一个模板，在做操作时，其实是以SQL语句为核心的
		     即在做增/删/时，insert/update/delete标签可通用，
		     但做查询时只能用select标签
		     我们提倡什么操作就用什么标签
	-->	

</mapper>